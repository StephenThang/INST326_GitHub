{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/StephenThang/INST326_GitHub/blob/main/Coding%20Exercise\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gXmxtVZ1Cf7b"
      },
      "source": [
        "***\n",
        "<a id='section_id-ex1'></a>\n",
        "### <span style=\"background-color:#CCFFCC\">Class Exercise-1: Markdown and HTML</span>\n",
        "* In a new Markdown cell, type your name and email information in \"bullet point\" format.\n",
        "***\n",
        "<div style=\"text-align: right\"> <a href='#section_id0'>Back to top of Notebook</a></div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 86,
      "metadata": {
        "id": "YsA7thrjuVW4"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vB_Cja0kuadx"
      },
      "source": [
        "\n",
        "\n",
        "\n",
        "*  Stephen Vanlian Thang\n",
        "*   svthang@terpmail.umd.edu\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wFgNUoqNCf7c"
      },
      "source": [
        "***\n",
        "<a id='section_id-ex2'></a>\n",
        "### <span style=\"background-color:#CCFFCC\">Class Exercise-2: User input</span>\n",
        "* Insert a new markdown cell in the notebook and type in the header \"Exercise-2 Answer\".\n",
        "* Create a python program to accomplish the following:\n",
        "    * Get five numbers from the user as input to the program\n",
        "    * Find the average of the five numbers\n",
        "    * Display the average of the five numbers to the user\n",
        "***\n",
        "<div style=\"text-align: right\"> <a href='#section_id0'>Back to top of Notebook</a></div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "29PJXuxnu7Q6",
        "outputId": "dfcd7ce6-8724-4f6e-c6e6-7a4c4ca2721f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Type a number five times to get the average: 1\n",
            "Type a number five times to get the average: 2\n",
            "Type a number five times to get the average: 3\n",
            "Type a number five times to get the average: 4\n",
            "Type a number five times to get the average: 5\n",
            "3.0\n"
          ]
        }
      ],
      "source": [
        "userInput = ''\n",
        "numbers = []\n",
        "\n",
        "while len(numbers) < 5:\n",
        "  userInput = input(\"Type a number five times to get the average: \")\n",
        "  numbers.append(int(userInput))\n",
        "  if len(numbers) == 5:\n",
        "    break\n",
        "print(sum(numbers)/5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "puQGc2rEu21b"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WXiodZhUCf7i"
      },
      "source": [
        "***\n",
        "<a id='section_id-ex3'></a>\n",
        "### <span style=\"background-color:#CCFFCC\">Class Exercise-3: Conditional logic</span>\n",
        "* Insert a new markdown cell in the notebook and type in the header \"Exercise-3 Answer\".\n",
        "* Create a python program to accomplish the following:\n",
        "    * Get five numbers from the user as input to the program\n",
        "    * Check if the user has entered duplicate numbers\n",
        "    * Allow only one duplicate pair of numbers. If the user has entered more duplicates, alert the user and replace the duplicate(s). For example, 1,2,2,3,4 is allowed but 1,2,2,3,3 is not allowed.\n",
        "    * Once you have all valid numbers, find the average of the numbers and display the average.\n",
        "***\n",
        "<div style=\"text-align: right\"> <a href='#section_id0'>Back to top of Notebook</a></div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tRTOwnL-DtLz"
      },
      "source": [
        "Exercise-3 Answer."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 88,
      "metadata": {
        "id": "l3voqfhCD0QS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e29eee59-3195-4bf3-c362-f1ac6b2677eb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter five numbers. Only one duplicate pair is allowed.\n",
            "Enter number 1: 1\n",
            "Enter number 2: 2\n",
            "Enter number 3: 2\n",
            "Enter number 4: 3\n",
            "Enter number 5: 4\n",
            "The average of the numbers is: 2.4\n"
          ]
        }
      ],
      "source": [
        "print(\"Enter five numbers. Only one duplicate pair is allowed.\")\n",
        "\n",
        "while True:\n",
        "  numbers = []\n",
        "\n",
        "  while len(numbers) < 5:\n",
        "      try:\n",
        "          num = int(input(f\"Enter number {len(numbers) + 1}: \"))\n",
        "          numbers.append(num)\n",
        "      except ValueError:\n",
        "          print(\"Invalid input. Please enter an integer.\")\n",
        "\n",
        "  counter = 0\n",
        "  for i in range(len(numbers)):\n",
        "    for j in range(i + 1, len(numbers)):\n",
        "      if numbers[i] == numbers[j]:\n",
        "        counter += 1\n",
        "\n",
        "  if counter == 1:\n",
        "    break\n",
        "  elif counter == 0:\n",
        "    break\n",
        "  else:\n",
        "    print(\"Too many duplicated values. \")\n",
        "\n",
        "average = sum(numbers) / len(numbers)\n",
        "print(f\"The average of the numbers is: {average}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gSbOdidPCf7k"
      },
      "source": [
        "***\n",
        "<a id='section_id-ex4'></a>\n",
        "### <span style=\"background-color:#CCFFCC\">Class Exercise-4: Using Functions</span>\n",
        "* Insert a new markdown cell in the notebook and type in the header \"Exercise-4 Answer\".\n",
        "* Create a python program to accomplish the following:\n",
        "    * Write three functions:\n",
        "        * First: to get five numbers from the user as input to the program\n",
        "        * Second: to check if the user has entered more than one pair of duplicate numbers, alert the user, and replace duplicate(s) with distinct numbers\n",
        "        * Third: find the average of the five numbers and display the average\n",
        "    * Using the above three functions, create a Python program to receive five numbers from a user, calculate the average, and display the calculated average to the user. Use exception handling wherever you see fit and show intuitive error messages to the user\n",
        "***"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i-cfQL8YnPSD"
      },
      "source": [
        "Exercise-4 Answer"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 89,
      "metadata": {
        "id": "_Pnt0dElnUrD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "32dd281c-33cf-44d5-9762-2363f6d5c1df"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter five numbers. Only one duplicate pair is allowed.\n",
            "Enter number 1: 1\n",
            "Enter number 2: 2\n",
            "Enter number 3: 2\n",
            "Enter number 4: 3\n",
            "Enter number 5: 4\n",
            "The average of the numbers is: 2.4\n"
          ]
        }
      ],
      "source": [
        "def get_five_numbers():\n",
        "  numbers = []\n",
        "  while len(numbers) < 5:\n",
        "    try:\n",
        "      num = int(input(f\"Enter number {len(numbers) + 1}: \"))\n",
        "      numbers.append(num)\n",
        "    except ValueError:\n",
        "      print(\"Invalid input. Please enter an integer.\")\n",
        "  return numbers\n",
        "\n",
        "def check_and_replace_duplicates(numbers):\n",
        "  while True:\n",
        "    counter = 0\n",
        "    for i in range(len(numbers)):\n",
        "      for j in range(i + 1, len(numbers)):\n",
        "        if numbers[i] == numbers[j]:\n",
        "          counter += 1\n",
        "\n",
        "    if counter <= 1:\n",
        "      break\n",
        "    else:\n",
        "      print(\"Too many duplicated values. Please re-enter the numbers.\")\n",
        "      numbers = get_five_numbers()\n",
        "  return numbers\n",
        "\n",
        "def calculate_and_display_average(numbers):\n",
        "  average = sum(numbers) / len(numbers)\n",
        "  print(f\"The average of the numbers is: {average}\")\n",
        "\n",
        "print(\"Enter five numbers. Only one duplicate pair is allowed.\")\n",
        "numbers = get_five_numbers()\n",
        "valid_numbers = check_and_replace_duplicates(numbers)\n",
        "calculate_and_display_average(valid_numbers)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dUvYlTosbXD6"
      },
      "source": [
        "***\n",
        "<a id='section_id-ex4'></a>\n",
        "### <span style=\"background-color:#CCFFCC\">Class Exercise-5: Non-numeric numbers</span>\n",
        "* Insert a new markdown cell in the notebook and type in the header \"Exercise-5 Answer\".\n",
        "* Change the above exercise to handle the following exception:\n",
        "  * Allow users to type numbers in text, i.e., \"one\" instead of \"1\" is allowed.\n",
        "\n",
        "\n",
        "***"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercise-5 Answer."
      ],
      "metadata": {
        "id": "v3jb1OfQSqY4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# --- parser ---\n",
        "def parse_text_number(s):\n",
        "    s = s.strip().lower()\n",
        "    # Try plain int first\n",
        "    try:\n",
        "        return int(s)\n",
        "    except ValueError:\n",
        "        pass\n",
        "\n",
        "    units = {\n",
        "        \"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4,\n",
        "        \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9,\n",
        "        \"ten\": 10, \"eleven\": 11, \"twelve\": 12, \"thirteen\": 13,\n",
        "        \"fourteen\": 14, \"fifteen\": 15, \"sixteen\": 16, \"seventeen\": 17,\n",
        "        \"eighteen\": 18, \"nineteen\": 19\n",
        "    }\n",
        "    tens = {\n",
        "        \"twenty\": 20, \"thirty\": 30, \"forty\": 40, \"fifty\": 50,\n",
        "        \"sixty\": 60, \"seventy\": 70, \"eighty\": 80, \"ninety\": 90\n",
        "    }\n",
        "\n",
        "    sign = 1\n",
        "    if s.startswith(\"negative \"):\n",
        "        sign = -1; s = s[len(\"negative \"):]\n",
        "    elif s.startswith(\"minus \"):\n",
        "        sign = -1; s = s[len(\"minus \"):]\n",
        "    elif s.startswith(\"-\"):\n",
        "        sign = -1; s = s[1:]\n",
        "\n",
        "    s = s.replace(\"-\", \" \")\n",
        "    words = [w for w in s.split() if w != \"and\"]\n",
        "    if not words:\n",
        "        raise ValueError(\"Invalid number format\")\n",
        "\n",
        "    total = 0\n",
        "    current = 0\n",
        "    for w in words:\n",
        "        if w in units:\n",
        "            current += units[w]\n",
        "        elif w in tens:\n",
        "            current += tens[w]\n",
        "        elif w == \"hundred\":\n",
        "            if current == 0:\n",
        "                current = 1\n",
        "            current *= 100\n",
        "            total += current\n",
        "            current = 0\n",
        "        else:\n",
        "            raise ValueError(f\"Unrecognized number word: '{w}'\")\n",
        "\n",
        "    return sign * (total + current)\n",
        "\n",
        "def get_five_numbers():\n",
        "    numbers = []\n",
        "    while len(numbers) < 5:\n",
        "        raw = input(f\"Enter number {len(numbers) + 1}: \")\n",
        "        try:\n",
        "            num = parse_text_number(raw)\n",
        "            numbers.append(num)\n",
        "        except ValueError:\n",
        "            print(\"Invalid input. Enter a digit (e.g., 7) or words like 'seven', 'twenty-one', 'minus three'.\")\n",
        "    return numbers\n",
        "\n",
        "def check_and_replace_duplicates(numbers):\n",
        "    while True:\n",
        "        counts = {}\n",
        "        for x in numbers:\n",
        "            counts[x] = counts.get(x, 0) + 1\n",
        "\n",
        "        too_many_of_a_kind = any(c > 2 for c in counts.values())\n",
        "        pairs = sum(1 for c in counts.values() if c == 2)\n",
        "\n",
        "        if not too_many_of_a_kind and pairs <= 1:\n",
        "            return numbers\n",
        "        print(\"Too many duplicated values. Only one duplicate pair is allowed. Please re-enter the numbers.\")\n",
        "        numbers = get_five_numbers()\n",
        "\n",
        "def calculate_and_display_average(numbers):\n",
        "    average = sum(numbers) / len(numbers)\n",
        "    print(f\"The average of the numbers is: {average}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    print(\"Enter five numbers. Digits or words are allowed (e.g., '8', 'seven', 'twenty-one', 'minus three').\")\n",
        "    numbers = get_five_numbers()\n",
        "    valid_numbers = check_and_replace_duplicates(numbers)\n",
        "    calculate_and_display_average(valid_numbers)\n"
      ],
      "metadata": {
        "id": "JV5eSndbUkp7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ae6b8c3-b3cf-428c-ca53-297c763934b0"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter five numbers. Digits or words are allowed (e.g., '8', 'seven', 'twenty-one', 'minus three').\n",
            "Enter number 1: twenty one\n",
            "Enter number 2: thirty three\n",
            "Enter number 3: five\n",
            "Enter number 4: two\n",
            "Enter number 5: one\n",
            "The average of the numbers is: 12.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QFZt6LqXcE3G"
      },
      "source": [
        "***\n",
        "<a id='section_id-ex4'></a>\n",
        "### <span style=\"background-color:#CCFFCC\">Class Exercise-6: Multi digit non-numeric numbers</span>\n",
        "* Insert a new markdown cell in the notebook and type in the header \"Exercise-6 Answer\".\n",
        "* Change the above exercise to handle the following exception:\n",
        "  * Allow multi digit non-numeric numbers. For example the following set of numbers is allowed: (1, eleven, 35, fifty four, 2).\n",
        "***"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercise-6 Answer"
      ],
      "metadata": {
        "id": "8Xy5VtGygoIn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def parse_text_number(s):\n",
        "    s = s.strip().lower()\n",
        "\n",
        "    try:\n",
        "        return int(s)\n",
        "    except ValueError:\n",
        "        pass\n",
        "\n",
        "    units = {\n",
        "        \"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4,\n",
        "        \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9,\n",
        "        \"ten\": 10, \"eleven\": 11, \"twelve\": 12, \"thirteen\": 13,\n",
        "        \"fourteen\": 14, \"fifteen\": 15, \"sixteen\": 16, \"seventeen\": 17,\n",
        "        \"eighteen\": 18, \"nineteen\": 19\n",
        "    }\n",
        "    tens = {\n",
        "        \"twenty\": 20, \"thirty\": 30, \"forty\": 40, \"fifty\": 50,\n",
        "        \"sixty\": 60, \"seventy\": 70, \"eighty\": 80, \"ninety\": 90\n",
        "    }\n",
        "\n",
        "    sign = 1\n",
        "    if s.startswith(\"negative \"):\n",
        "        sign = -1; s = s[len(\"negative \"):]\n",
        "    elif s.startswith(\"minus \"):\n",
        "        sign = -1; s = s[len(\"minus \"):]\n",
        "    elif s.startswith(\"-\"):\n",
        "        sign = -1; s = s[1:]\n",
        "\n",
        "    s = s.replace(\"-\", \" \")\n",
        "    words = [w for w in s.split() if w != \"and\"]\n",
        "    if not words:\n",
        "        raise ValueError(\"Invalid number format\")\n",
        "\n",
        "    total = 0\n",
        "    current = 0\n",
        "    for w in words:\n",
        "        if w in units:\n",
        "            current += units[w]\n",
        "        elif w in tens:\n",
        "            current += tens[w]\n",
        "        elif w == \"hundred\":\n",
        "            if current == 0:\n",
        "                current = 1\n",
        "            current *= 100\n",
        "            total += current\n",
        "            current = 0\n",
        "        else:\n",
        "            raise ValueError(f\"Unrecognized number word: '{w}'\")\n",
        "\n",
        "    return sign * (total + current)\n",
        "\n",
        "\n",
        "def get_five_numbers():\n",
        "    numbers = []\n",
        "    while len(numbers) < 5:\n",
        "        raw = input(f\"Enter number {len(numbers) + 1}: \")\n",
        "        try:\n",
        "            num = parse_text_number(raw)\n",
        "            numbers.append(num)\n",
        "        except ValueError:\n",
        "            print(\"Invalid input. Enter a digit (e.g., 35) or words like 'fifty four', 'twenty-one', 'minus three'.\")\n",
        "    return numbers\n",
        "\n",
        "\n",
        "def check_and_replace_duplicates(numbers):\n",
        "    while True:\n",
        "        counts = {}\n",
        "        for x in numbers:\n",
        "            counts[x] = counts.get(x, 0) + 1\n",
        "\n",
        "        too_many_of_a_kind = any(c > 2 for c in counts.values())\n",
        "        pairs = sum(1 for c in counts.values() if c == 2)\n",
        "\n",
        "        if not too_many_of_a_kind and pairs <= 1:\n",
        "            return numbers\n",
        "\n",
        "        print(\"Too many duplicated values. Only one duplicate pair is allowed. Please re-enter the numbers.\")\n",
        "        numbers = get_five_numbers()\n",
        "\n",
        "\n",
        "def calculate_and_display_average(numbers):\n",
        "    average = sum(numbers) / len(numbers)\n",
        "    print(f\"The average of the numbers is: {average}\")\n",
        "\n",
        "\n",
        "print(\"Enter five numbers. Digits or words are allowed (e.g., 1, eleven, 35, fifty four, 2).\")\n",
        "numbers = get_five_numbers()\n",
        "valid_numbers = check_and_replace_duplicates(numbers)\n",
        "calculate_and_display_average(valid_numbers)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ldmjs4lIgq9X",
        "outputId": "0f4c0d03-324a-4f2c-aa07-51c3e70f3110"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter five numbers. Digits or words are allowed (e.g., 1, eleven, 35, fifty four, 2).\n",
            "Enter number 1: 1\n",
            "Enter number 2: eleven\n",
            "Enter number 3: twelve\n",
            "Enter number 4: 4\n",
            "Enter number 5: 5\n",
            "The average of the numbers is: 6.6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ai2eU0JZJ9Zz"
      },
      "source": [
        "### Class Exercise-7: Multi digit large non-numeric numbers\n",
        "*   Repeat the above exercise and allow individual numbers upto 999.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercise-7 Answer"
      ],
      "metadata": {
        "id": "56FvDOd4jinq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def parse_text_number(s):\n",
        "    s = s.strip().lower()\n",
        "\n",
        "    try:\n",
        "        val = int(s)\n",
        "        if 0 <= val <= 999:\n",
        "            return val\n",
        "        else:\n",
        "            raise ValueError(\"Number must be between 0 and 999.\")\n",
        "    except ValueError:\n",
        "        pass\n",
        "\n",
        "    if s.startswith(\"negative \") or s.startswith(\"minus \") or s.startswith(\"-\"):\n",
        "        raise ValueError(\"Negative numbers are not allowed (must be 0 to 999).\")\n",
        "\n",
        "    units = {\n",
        "        \"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4,\n",
        "        \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9,\n",
        "        \"ten\": 10, \"eleven\": 11, \"twelve\": 12, \"thirteen\": 13,\n",
        "        \"fourteen\": 14, \"fifteen\": 15, \"sixteen\": 16, \"seventeen\": 17,\n",
        "        \"eighteen\": 18, \"nineteen\": 19\n",
        "    }\n",
        "    tens = {\n",
        "        \"twenty\": 20, \"thirty\": 30, \"forty\": 40, \"fifty\": 50,\n",
        "        \"sixty\": 60, \"seventy\": 70, \"eighty\": 80, \"ninety\": 90\n",
        "    }\n",
        "\n",
        "    if \"thousand\" in s:\n",
        "        raise ValueError(\"Numbers must be less than 1000.\")\n",
        "\n",
        "    s = s.replace(\"-\", \" \")\n",
        "    words = [w for w in s.split() if w != \"and\"]\n",
        "    if not words:\n",
        "        raise ValueError(\"Invalid number format.\")\n",
        "\n",
        "    total = 0\n",
        "    current = 0\n",
        "    for w in words:\n",
        "        if w in units:\n",
        "            current += units[w]\n",
        "        elif w in tens:\n",
        "            current += tens[w]\n",
        "        elif w == \"hundred\":\n",
        "            if current == 0:\n",
        "                current = 1\n",
        "            current *= 100\n",
        "            total += current\n",
        "            current = 0\n",
        "        else:\n",
        "            raise ValueError(f\"Unrecognized number word: '{w}'\")\n",
        "\n",
        "    val = total + current\n",
        "    if 0 <= val <= 999:\n",
        "        return val\n",
        "    raise ValueError(\"Number must be between 0 and 999.\")\n",
        "\n",
        "\n",
        "def get_five_numbers():\n",
        "    numbers = []\n",
        "    while len(numbers) < 5:\n",
        "        raw = input(f\"Enter number {len(numbers) + 1}: \")\n",
        "        try:\n",
        "            num = parse_text_number(raw)\n",
        "            numbers.append(num)\n",
        "        except ValueError as e:\n",
        "            print(f\"Invalid input. {e} Try digits or words like '35', 'fifty four', 'one hundred two'.\")\n",
        "    return numbers\n",
        "\n",
        "def check_and_replace_duplicates(numbers):\n",
        "    while True:\n",
        "        counts = {}\n",
        "        for x in numbers:\n",
        "            counts[x] = counts.get(x, 0) + 1\n",
        "\n",
        "        too_many_of_a_kind = any(c > 2 for c in counts.values())\n",
        "        pairs = sum(1 for c in counts.values() if c == 2)\n",
        "\n",
        "        if not too_many_of_a_kind and pairs <= 1:\n",
        "            return numbers\n",
        "\n",
        "        print(\"Too many duplicated values. Only one duplicate pair is allowed. Please re-enter the numbers.\")\n",
        "        numbers = get_five_numbers()\n",
        "\n",
        "\n",
        "def calculate_and_display_average(numbers):\n",
        "    average = sum(numbers) / len(numbers)\n",
        "    print(f\"The average of the numbers is: {average}\")\n",
        "\n",
        "\n",
        "print(\"Enter five numbers (0–999). Digits or words allowed, e.g., 1, eleven, 35, fifty four, nine hundred.\")\n",
        "nums = get_five_numbers()\n",
        "valid_nums = check_and_replace_duplicates(nums)\n",
        "calculate_and_display_average(valid_nums)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EzzLwvjLjmiK",
        "outputId": "a3be6c86-cef9-4132-d412-51f717e85666"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter five numbers (0–999). Digits or words allowed, e.g., 1, eleven, 35, fifty four, nine hundred.\n",
            "Enter number 1: one\n",
            "Enter number 2: two\n",
            "Enter number 3: five\n",
            "Enter number 4: 88\n",
            "Enter number 5: 999\n",
            "The average of the numbers is: 219.0\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.13"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}